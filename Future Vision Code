Copyright (c) 2023, Ronny Rowe
All rights reserved.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree. 

using System.Collections;
using System.Collections.Generic;
using UnityEngine;


public class PerspectiveShift : MonoBehaviour

{   // define variables
    public GameObject Person;
    public GameObject vrRig;
    public GameObject Wall;
    public GameObject choicePoint;
    public Camera mainCam;
    public bool perspectiveShift;

    public float functionDelay; // the delay before the perspective shift occurs
    public float shiftTime; // the duration of the perspective shift
    float iterator;

    UnityEngine.SpatialTracking.TrackedPoseDriver pd = new UnityEngine.SpatialTracking.TrackedPoseDriver(); // defining the tracked pose driver


// Start is called before the first frame update
    void Start()
    {
       
    }

    void Update()
    {
        if (perspectiveShift == false)
        {
            StartCoroutine(ShiftPerspective()); // starts the perspective shift function as perspectiveShift will initially be false
        }
    }

    IEnumerator ShiftPerspective() // defining the perspective shift function
    {
        perspectiveShift = true; // for a single transition
        yield return new WaitForSeconds(functionDelay); // delays the execution of the coroutine that executes the perspective shift function by x seconds (the function delay)

        iterator = 0;

        while (iterator < 1)
        {
              UnityEngine.SpatialTracking.TrackedPoseDriver trackedPoseDriver = mainCam.GetComponent(pd.GetType()) as  UnityEngine.SpatialTracking.TrackedPoseDriver;
              // referencing the tracked pose driver to the tracked pose driver component of the main camera
            
              Person.transform.position = choicePoint.transform.position;
              // shifts the position of the person to the choice point
              // since the main camera is a child of the person game object, it moves with them

              trackedPoseDriver.trackingType = UnityEngine.SpatialTracking.TrackedPoseDriver.TrackingType.PositionOnly;
              // disabling the rotation tracking to enable the camera to rotate to the global perspective (0, 90, 0) at the choice point
              // since the tracked pose driver is only tracking user position, movement of the camera is not registered

              mainCam.transform.rotation = choicePoint.transform.rotation; // this now presents the scene of the path junction with the wall

              Wall.SetActive(false); // the wall game object is removed, revealing the path the pink sphere is behind
              yield return new WaitForSeconds(shiftTime);
              Wall.SetActive(true); // the wall reappears after the duration of the camera transition has elapsed

              trackedPoseDriver.trackingType = UnityEngine.SpatialTracking.TrackedPoseDriver.TrackingType.RotationAndPosition;
              // resetting the position and rotation tracking to track the perspective shift back to the VR Rig

              Person.transform.position = vrRig.transform.position;
              mainCam.transform.rotation = vrRig.transform.rotation;

              iterator = iterator + 1; // the perspective shift function will not occur again
        }
    }
